generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  email          String   @id @unique
  username       String   @unique
  password       String?   
  first_name     String?  @db.VarChar(255)
  last_name      String?  @db.VarChar(255)
  bio            String? 
  gender         Gender?
  is_admin       Boolean  @default(false)
  avatar         String?  
  rooms          Room[]   @relation("UsersToRoom")
  submissions    Submission[] @relation("UserToSubmission")
  codechef       Codechef? @relation("UserToCodechef")
  codeforces     Codeforces? @relation("UserToCodeforces")
  leetcode       Leetcode? @relation("UserToLeetcode")
  room           Room[]   @relation("UserToRoom")
  messages       Message[] @relation("UserToMessages")
  rating_change  RatingChange[] @relation("UserToRatingChange")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Gender {
  Male
  Female
  Other
}

model Codechef {
  id                Int    @id @default(autoincrement())
  codechef_id       String?
  verified          Boolean @default(false)
  user_email        String @unique
  rating            Int?
  global_rank       Int?
  number_of_contests Int?
  number_of_questions Int?
  user              User   @relation("UserToCodechef", fields: [user_email], references: [email])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Codeforces {
  id                Int    @id @default(autoincrement())
  codeforces_id     String?
  verified          Boolean @default(false)
  user_email        String @unique
  rating            Int?
  global_rank       Int?
  number_of_contests Int?
  number_of_questions Int?
  user              User   @relation("UserToCodeforces", fields: [user_email], references: [email])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Leetcode {
  id                Int    @id @default(autoincrement())
  leetcode_id       String?
  verified          Boolean @default(false)
  user_email        String @unique
  rating            Int?
  global_rank       Int?
  number_of_contests Int?
  number_of_questions Int?
  user              User   @relation("UserToLeetcode", fields: [user_email], references: [email])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Room {
  id           String    @id @default(uuid())
  title        String
  host_email   String
  user         User      @relation("UserToRoom", fields: [host_email], references: [email])
  participants User[]    @relation("UsersToRoom")
  topics       Topic[]
  messages     Message[] @relation("RoomToMessages")
  description  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([host_email])
}

model Message {
  id         Int     @id @default(autoincrement())
  room_id    String
  room       Room    @relation("RoomToMessages", fields: [room_id], references: [id])
  sender_email String
  sender     User    @relation("UserToMessages", fields: [sender_email], references: [email])
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([room_id])
  @@index([sender_email])
}

model Problem {
  title       String   @id
  platform    Platform
  submissions Submission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Platform {
  codeforces
  leetcode
  codechef
}

model Contest {
  title           String   @id
  url             String
  platform        Platform
  start_time      DateTime
  end_time        DateTime?
  total_questions Int
  rating_changes  RatingChange[] @relation("ContestToRatingChange")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Topic {
  name  String @id
  rooms Room[]
}

model Submission {
  id             Int      @id @default(autoincrement())
  submittedAt    DateTime
  link           String?
  problem_title  String
  problem        Problem  @relation(fields: [problem_title], references: [title])
  user_email     String
  submitted_by   User     @relation("UserToSubmission", fields: [user_email], references: [email])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([problem_title])
  @@index([user_email])
}

model RatingChange {
  id                     Int      @id @default(autoincrement())
  contest_title          String
  contest                Contest  @relation("ContestToRatingChange", fields: [contest_title], references: [title])
  user_email             String
  user                   User     @relation("UserToRatingChange", fields: [user_email], references: [email])
  rating_change          Int 
  end_time               DateTime?
  rank                   Int
  number_of_problems_solved Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([contest_title])
  @@index([user_email])
}
